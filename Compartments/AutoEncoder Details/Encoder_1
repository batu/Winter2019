input_img = Input(shape=IMAGE_SHAPE)  # adapt this if using `channels_first` image data format

padding_x = int((256 - IMAGE_SHAPE[0]) / 2)
padding_y = int((256 - IMAGE_SHAPE[1]) / 2)

x = layers.ZeroPadding2D(padding=(padding_x, padding_y))(input_img)

x = layers.Conv2D(64, (5, 5), activation='relu', padding='same')(x)
x = layers.MaxPooling2D((4, 4), padding='same')(x)

x = layers.Conv2D(64, (4, 4), activation='relu', padding='same')(x)
x = layers.MaxPooling2D((4, 4), padding='same')(x)

x = layers.Conv2D(16, (3, 3), activation='relu', padding='same')(x)
x = layers.MaxPooling2D((4, 4), padding='same')(x)

encoded = layers.Flatten(name="bottlneck")(x)

x = layers.Reshape((4, 4, 16))(encoded)

x = layers.UpSampling2D((4, 4))(x)
x = layers.Conv2D(64, (4, 4), activation='relu', padding='same')(x)

x = layers.UpSampling2D((4, 4))(x)
x = layers.Conv2D(64, (4, 4), activation='relu', padding='same')(x)

x = layers.UpSampling2D((4, 4))(x)
x = layers.Conv2D(3, (5, 5), activation='sigmoid', padding='same')(x)

decoded = layers.Cropping2D(cropping=(padding_x, padding_y))(x)

encoder = Model(input_img, encoded)
autoencoder = Model(input_img, decoded)

autoencoder.compile(optimizer='Adam', loss='binary_crossentropy')
autoencoder.summary()
